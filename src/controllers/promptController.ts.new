import { Request, Response, NextFunction } from 'express';
import { GeneratePromptRequest, WorkflowState } from '../types';
import { AppError } from '../middleware/error';
import logger from '../utils/logger';

// Import services
import JiraService = require('../services/jiraService');
import ConfluenceService = require('../services/confluenceService');
import { PromptGenerationService } from '../services/promptGenerationService';

class PromptController {
    private readonly jiraService: InstanceType<typeof JiraService>;
    private readonly confluenceService: InstanceType<typeof ConfluenceService>;
    private readonly promptService: PromptGenerationService;

    constructor() {
        this.jiraService = new JiraService();
        this.confluenceService = new ConfluenceService();
        this.promptService = new PromptGenerationService();
    }

    public generatePrompt = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
        try {
            const { role, jiraId, confId } = req.body as GeneratePromptRequest;

            // Validate role
            if (role !== 'Tester' && role !== 'Business Analyst') {
                throw new AppError(400, "Invalid role: must be 'Tester' or 'Business Analyst'");
            }

            // Validate required fields
            if (!jiraId || !confId) {
                throw new AppError(400, 'Missing required fields: jiraId and confId are required');
            }

            logger.info(`Processing request for role: ${role}, JIRA ID: ${jiraId}, Confluence ID: ${confId}`);

            // Initialize workflow state
            const state: WorkflowState = {
                role,
                jiraId,
                confId
            };

            // Fetch JIRA and Confluence data
            const [jiraData, confData] = await Promise.all([
                this.jiraService.fetchJiraData(jiraId),
                this.confluenceService.fetchConfluenceData(confId)
            ]);

            state.jiraData = jiraData;
            state.confData = confData;

            // Generate prompt based on role
            const output = await this.promptService.generatePrompt(state);

            // Return response
            res.status(200).json({
                role,
                jiraId,
                confId,
                output
            });
        } catch (error) {
            next(error);
        }
    };
}

// Create a singleton instance
const controller = new PromptController();
export = controller;
